package com.eidd.mission.service;

import com.eidd.exceptions.RobotException;
import com.eidd.mission.db.entity.Mission;
import com.eidd.mission.db.repository.MissionRepository;
import com.fasterxml.jackson.databind.ObjectMapper;
import jakarta.annotation.PostConstruct;
import jakarta.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.PessimisticLockingFailureException;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;

@Service("mission_service")
public class MissionService {
    private static final String JSON_FILE_PATH = "src/main/resources/missions.json";

    private static HashMap<Integer, Mission> missionsMap = new HashMap<>();
    private HashMap<Long, Integer> missionMapCounter = new HashMap<>();
    private Integer missionId = 0;
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private MissionRepository missionRepository;

    public HashMap<Long, Integer> getBackUpMapCounter() {
        return missionMapCounter;
    }

    @Transactional
    public List<Mission> getAll() throws RobotException {
        try {
            List<Mission> result = new ArrayList<>();
            missionRepository.findAll().forEach(result::add);
            return result;

        } catch (PessimisticLockingFailureException plfe) {
            throw new RobotException("DB lock detected while getting all robots information: " + plfe.getMessage(), plfe);
        } catch (RuntimeException re) {
            throw new RobotException("Unable to get all robots: " + re.getMessage(), re);
        }
    }


    @Transactional
    public Mission create(Mission mission) throws RobotException {
        try {

            return missionRepository.save(mission);
        } catch (PessimisticLockingFailureException plfe) {
            throw new RobotException("DB lock detected while creating device:" + mission, plfe);
        } catch (RuntimeException e) {
            throw new RobotException("Unexpected '" + e.getMessage() + "' in device creation", e);
        }
    }

    @PostConstruct
    public void init() {
        try {
            //read JSON
            List<Mission> missions = readRobotsFromJsonFile();
            //updtate Mission Data Base
            missions.forEach(this::create);
            //create Mission Map
            createMissionMap();
        } catch (RuntimeException e) {
            throw new RobotException("Unable to load data file", e);
        }
    }

    public void createMissionMap() {
        List<Mission> missions = getAll();
        //creating map
        missionId = 0;
        if (!missions.isEmpty()) {
            missions.forEach(mission -> {
                missionsMap.put(missionId, mission);
                missionId = missionId + 1;
            });
        }

        missionId = 0;
    }

    @Transactional
    public Mission getMission() throws RobotException {
        try {
            if (missionsMap == null) {
                return null;
            }
            Mission currentMission = missionsMap.get(missionId);
            missionId += 1;
            if (missionId >= missionsMap.size()) {
                missionId = 0;
            }
            return currentMission;

        } catch (PessimisticLockingFailureException plfe) {
            throw new RobotException("DB lock detected while getting all mission information: " + plfe.getMessage(), plfe);
        } catch (RuntimeException re) {
            throw new RobotException("Unable to get all missions: " + re.getMessage(), re);
        }
    }

    public List<Mission> readRobotsFromJsonFile() {
        ObjectMapper objectMapper = new ObjectMapper();

        try {
            // Use File to create a file reference
            File file = new File(JSON_FILE_PATH);

            // Read the JSON file and convert it to a list of Robot objects
            Mission[] missionArray = objectMapper.readValue(file, Mission[].class);
            return Arrays.asList(missionArray);
        } catch (IOException e) {
            e.printStackTrace();
            // Handle the exception (e.g., log the error, throw a custom exception)
            throw new RobotException("Unable to get all missions: " + e.getMessage(), e);
        }
    }

    public static HashMap<Integer, Mission> getMissionsMap() {
        return missionsMap;
    }
}
