package com.eidd.robot.db.service;

import com.eidd.exceptions.RobotException;
import com.eidd.robot.db.entity.Robot;
import com.eidd.robot.db.repository.RobotRepository;
import jakarta.transaction.Transactional;
import org.hibernate.boot.jaxb.internal.stax.MappingEventReader;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.PessimisticLockingFailureException;
import org.springframework.orm.ObjectOptimisticLockingFailureException;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

/**
 * Service that manages Devices read from and write to database.
 */
@Service("robot_data_service")
public class StdRobotService implements RobotService {

    private static final Logger log = LoggerFactory.getLogger(StdRobotService.class);

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private RobotRepository robotRepository;

    @Override
    @Transactional
    public List<Robot> getAll() throws RobotException {
        try {
            List<Robot> result = new ArrayList<>();
            robotRepository.findAll().forEach(result::add);
            return result.stream().sorted(Comparator.comparingDouble(Robot::getId)).collect(Collectors.toList());

        } catch (PessimisticLockingFailureException plfe) {
            throw new RobotException("DB lock detected while getting all robots information: " + plfe.getMessage(), plfe);
        } catch (RuntimeException re) {
            throw new RobotException("Unable to get all robots: " + re.getMessage(), re);
        }
    }

    @Override
    @Transactional
    public Optional<Robot> find(Integer id) throws RobotException {
        try {
            return doFindById(id);
        } catch (RobotException ae) {
            // no use to encapsulate
            throw ae;
        } catch (PessimisticLockingFailureException plfe) {
            throw new RobotException("DB lock detected while finding robotId=" + id, plfe);
        } catch (RuntimeException re) {
            throw new RobotException("Unable to find Device with robotId=" + id, re);
        }
    }

    @Override
    @Transactional
    public void delete(Integer id) throws RobotException {
        try {
            doDeleteById(id);
        } catch (RobotException ae) {
            // no use to encapsulate
            throw ae;
        } catch (IllegalArgumentException ae) {
            // no use to encapsulate
            throw new RobotException("IllegalArgumentException deleting robotId:" + id, ae);
        } catch (PessimisticLockingFailureException plfe) {
            throw new RobotException("DB lock detected while deleting robotId:" + id, plfe);
        }
    }

    @Override
    @Transactional
    public Robot create(Robot robot) throws RobotException {
        checkForCreate(robot);
        try {
            Robot result = doCreate(robot);
            return result;
        } catch (PessimisticLockingFailureException plfe) {
            throw new RobotException("DB lock detected while creating device:" + robot, plfe);
        } catch (RuntimeException e) {
            throw new RobotException("Unexpected '" + e.getMessage() + "' in device creation", e);
        }
    }

    @Override
    @Transactional
    public Robot update(Robot robot) throws RobotException {
        checkForUpdate(robot);
        try {
            Robot result = doUpdate(robot);
            return result;
        } catch (ObjectOptimisticLockingFailureException e) {
            throw new MappingEventReader.BadVersionException("Bad version in " + robot);
        } catch (PessimisticLockingFailureException plfe) {
            throw new RobotException("DB lock detected while updating load:" + robot, plfe);
        } catch (RobotException ae) {
            // no use to encapsulate
            throw ae;
        } catch (RuntimeException e) {
            throw new RobotException("Unexpected '" + e.getMessage() + "' in update", e);
        }
    }


    /**
     * To update a robot, it is needed to retrieve the robot by its id.
     *
     * @param robot The robot object.
     */
    protected void checkForUpdate(Robot robot) {
        Robot currentRobot = robotRepository.findById(robot.getId()).orElse(null);
        if (currentRobot == null) {
            log.error("Update failed. ROBOT with id {} was not found", robot.getId());
            throw new RobotException("RobotId:" + robot.getId() + " not found");
        }
    }

    /**
     * Call the repository to update. Specialized in derived class.
     *
     * @param robot The Robot data object.
     * @return an updated robot.
     */
    protected Robot doUpdate(Robot robot) throws RobotException {
        return robotRepository.save(robot);
    }


    /**
     * Do some checks.
     */
    protected void checkForCreate(Robot robot) {
        if (robot.getId() == 0) {
            throw new RobotException("Can't create a [" + robot + "] with 0 value set in id field");
        }
    }

    /**
     * Call the repository to create. Specialized in derived class.
     */
    protected Robot doCreate(Robot robot) throws RobotException {
        return robotRepository.save(robot);
    }

    /**
     * Specialized in derived class.
     */
    protected Optional<Robot> doFindById(Integer id) throws RobotException {
        return robotRepository.findById(id);
    }


    /**
     * Specialized in derived class.
     *
     * @param id The id of the robot.
     */
    protected void doDeleteById(Integer id) throws RobotException {
        robotRepository.deleteById(id);
    }
}
