/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.52).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.eidd.robot.rest.api;

import com.eidd.robot.db.entity.Robot;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-01-28T16:42:24.909806251Z[GMT]")
@Validated
public interface RobotApi {

    @Operation(summary = "Get all robots", description = "", tags = {})
    @ApiResponses(value = {@ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Robot.class))))})
    @RequestMapping(value = "/robot", produces = {"application/json"}, method = RequestMethod.GET)
    ResponseEntity<List<Robot>> robotGet();


    @Operation(summary = "Delete a robot by ID", description = "", tags = {})
    @ApiResponses(value = {@ApiResponse(responseCode = "204", description = "Robot deleted successfully"), @ApiResponse(responseCode = "404", description = "Robot not found")})
    @RequestMapping(value = "/robot/{id}", method = RequestMethod.DELETE)
    ResponseEntity<Void> robotIdDelete(@Parameter(in = ParameterIn.PATH, description = "ID of the robot", required = true, schema = @Schema()) @PathVariable("id") Integer id);


    @Operation(summary = "Get a robot by ID", description = "", tags = {})
    @ApiResponses(value = {@ApiResponse(responseCode = "200", description = "The requested robot"),

            @ApiResponse(responseCode = "404", description = "Robot not found")})
    @RequestMapping(value = "/robot/{id}", produces = {"application/json"}, method = RequestMethod.GET)
    ResponseEntity<Robot> robotIdGet(@Parameter(in = ParameterIn.PATH, description = "ID of the robot", required = true, schema = @Schema()) @PathVariable("id") Integer id);


    @Operation(summary = "Update a robot by ID", description = "", tags = {})
    @ApiResponses(value = {@ApiResponse(responseCode = "200", description = "Robot updated successfully"),

            @ApiResponse(responseCode = "404", description = "Robot not found")})
    @RequestMapping(value = "/robot/{id}", produces = {"application/json"}, consumes = {"application/json"}, method = RequestMethod.PUT)
    ResponseEntity<Robot> robotIdPut(@Parameter(in = ParameterIn.PATH, description = "ID of the robot", required = true, schema = @Schema()) @PathVariable("id") Integer id, @Parameter(in = ParameterIn.DEFAULT, description = "", required = true, schema = @Schema()) @Valid @RequestBody Robot body);


    @Operation(summary = "Create a new robot", description = "", tags = {})
    @ApiResponses(value = {@ApiResponse(responseCode = "201", description = "Robot created successfully")})
    @RequestMapping(value = "/robot", produces = {"application/json"}, consumes = {"application/json"}, method = RequestMethod.POST)
    ResponseEntity<Robot> robotPost(@Parameter(in = ParameterIn.DEFAULT, description = "", required = true, schema = @Schema()) @Valid @RequestBody Robot body);

}

